version: '3'
name: gkiverstroy

services:
  reverse-proxy:
    image: traefik:v2.5
    env_file:
      - backend/.env
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myletsencrypt.acme.httpChallenge=true"
      - "--certificatesresolvers.myletsencrypt.acme.httpChallenge.entryPoint=web"
      - "--certificatesresolvers.myletsencrypt.acme.email=${EMAIL}"
      - "--certificatesresolvers.myletsencrypt.acme.storage=/acme.json"
      - "--http.middlewares.redirect-to-https.redirectScheme.scheme=https"
      - "--http.middlewares.redirect-to-https.redirectScheme.permanent=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
      - "./acme.json:/acme.json"
    networks:
      - web

  nuxt:
    env_file:
      - backend/.env
      - front/.env
      - ./.env
    build:
      context: ./front
      dockerfile: Dockerfile-front
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nuxt.rule=Host(`${HOST}`)"
      - "traefik.http.routers.nuxt.entrypoints=web"
      - "traefik.http.routers.nuxt.middlewares=redirect-to-https"
      - "traefik.http.routers.nuxt-secure.rule=Host(`${HOST}`)"
      - "traefik.http.routers.nuxt-secure.entrypoints=websecure"
      - "traefik.http.services.nuxt.loadbalancer.server.port=3000"
    restart: unless-stopped
    networks:
      - web

  django:
    env_file:
      - backend/.env
    build:
      context: ./backend
      dockerfile: Dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.django.rule=Host(`${HOST}`) && (PathPrefix(`/api`) || PathPrefix(`/admin`) || PathPrefix(`/static`))"
      - "traefik.http.routers.django.entrypoints=web"
      - "traefik.http.routers.django.middlewares=redirect-to-https"
      - "traefik.http.routers.django-secure.rule=Host(`${HOST}`) && (PathPrefix(`/api`) || PathPrefix(`/admin`) || PathPrefix(`/static`))"
      - "traefik.http.routers.django-secure.entrypoints=websecure"
      - "traefik.http.services.django.loadbalancer.server.port=8000"
    environment:
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    depends_on:
      - db
    restart: on-failure
    networks:
      - web

  telegram-bot:
    env_file:
      - backend/.env
    build:
      context: ./telegram_bot
      dockerfile: Dockerfile-bot
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.telegram-bot.rule=Host(`${HOST}`) && PathPrefix(`/webhook`)"
        - "traefik.http.services.telegram-bot.loadbalancer.server.port=5000"
    environment:
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
    restart: unless-stopped
    depends_on:
      - django
    networks:
      - web

  db:
    image: postgres:16.4-alpine3.20
    env_file:
      - backend/.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - LANG=en_US.UTF-8
      - LC_ALL=en_US.UTF-8
    ports:
      - "5432:5432"
    networks:
      - web

volumes:
  postgres_data:

networks:
  web:
